#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x1vTensor_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[16]; 
 
  tmp[0] = 0.5*(A[15]*B[15]+A[14]*B[14]+A[13]*B[13]+A[12]*B[12]+A[11]*B[11]+A[10]*B[10]+A[9]*B[9]+A[8]*B[8]+A[7]*B[7]+A[6]*B[6]+A[5]*B[5]+A[4]*B[4]+A[3]*B[3]+A[2]*B[2]+A[1]*B[1]+A[0]*B[0]); 
  tmp[1] = 0.004761904761904762*(92.22255689363635*(A[14]*B[15]+B[14]*A[15])+93.91485505499116*(A[12]*B[14]+B[12]*A[14])+92.22255689363635*(A[10]*B[13]+B[10]*A[13])+105.0*(A[9]*B[12]+B[9]*A[12])+92.22255689363637*(A[6]*B[11]+B[6]*A[11])+93.91485505499116*(A[7]*B[10]+B[7]*A[10])+92.22255689363637*(A[4]*B[8]+B[4]*A[8])+105.0*(A[5]*B[7]+B[5]*A[7])+93.91485505499116*(A[3]*B[6]+B[3]*A[6]+A[1]*B[4]+B[1]*A[4])+105.0*(A[2]*B[3]+B[2]*A[3]+A[0]*B[1]+B[0]*A[1])); 
  tmp[2] = 0.004761904761904762*(92.22255689363635*(A[13]*B[15]+B[13]*A[15]+A[10]*B[14]+B[10]*A[14])+93.91485505499116*(A[11]*B[13]+B[11]*A[13])+92.22255689363637*(A[7]*B[12]+B[7]*A[12])+105.0*(A[8]*B[11]+B[8]*A[11])+93.91485505499116*(A[6]*B[10]+B[6]*A[10])+92.22255689363637*(A[5]*B[9]+B[5]*A[9])+93.91485505499116*(A[3]*B[7]+B[3]*A[7])+105.0*(A[4]*B[6]+B[4]*A[6])+93.91485505499116*(A[2]*B[5]+B[2]*A[5])+105.0*(A[1]*B[3]+B[1]*A[3]+A[0]*B[2]+B[0]*A[2])); 
  tmp[3] = 9.523809523809524e-4*(405.0*(A[10]*B[15]+B[10]*A[15])+(405.0*A[13]+412.4318125460256*A[7])*B[14]+(405.0*B[13]+412.4318125460256*B[7])*A[14]+412.4318125460256*(A[6]*B[13]+B[6]*A[13])+(412.4318125460256*A[10]+461.112784468182*A[5])*B[12]+(412.4318125460256*B[10]+461.112784468182*B[5])*A[12]+(412.4318125460256*A[10]+461.112784468182*A[4])*B[11]+(412.4318125460256*B[10]+461.112784468182*B[4])*A[11]+420.0*(A[3]*B[10]+B[3]*A[10])+461.112784468182*(A[7]*B[9]+B[7]*A[9]+A[6]*B[8]+B[6]*A[8])+(420.0*A[6]+469.5742752749558*A[2])*B[7]+(420.0*B[6]+469.5742752749558*B[2])*A[7]+469.5742752749558*(A[1]*B[6]+B[1]*A[6])+469.5742752749559*(A[3]*B[5]+B[3]*A[5]+A[3]*B[4]+B[3]*A[4])+525.0*(A[0]*B[3]+B[0]*A[3]+A[1]*B[2]+B[1]*A[2])); 
  tmp[4] = 9.523809523809524e-4*((313.0495168499706*A[15]+461.112784468182*A[12])*B[15]+461.112784468182*B[12]*A[15]+(335.4101966249685*A[14]+525.0000000000001*A[9])*B[14]+525.0000000000001*B[9]*A[14]+(313.0495168499706*A[13]+461.1127844681819*A[7])*B[13]+461.1127844681819*B[7]*A[13]+469.5742752749559*A[12]*B[12]+(313.0495168499706*A[11]+461.112784468182*A[3])*B[11]+461.112784468182*B[3]*A[11]+(335.4101966249685*A[10]+525.0*A[5])*B[10]+525.0*B[5]*A[10]+(313.0495168499706*A[8]+461.1127844681819*A[1])*B[8]+461.1127844681819*B[1]*A[8]+469.5742752749559*A[7]*B[7]+(335.4101966249685*A[6]+525.0000000000001*A[2])*B[6]+525.0000000000001*B[2]*A[6]+(335.4101966249685*A[4]+525.0*A[0])*B[4]+525.0*B[0]*A[4]+469.5742752749559*(A[3]*B[3]+A[1]*B[1])); 
  tmp[5] = 9.523809523809524e-4*((313.0495168499706*A[15]+461.112784468182*A[11])*B[15]+461.112784468182*B[11]*A[15]+(313.0495168499706*A[14]+461.1127844681819*A[6])*B[14]+461.1127844681819*B[6]*A[14]+(335.4101966249685*A[13]+525.0000000000001*A[8])*B[13]+525.0000000000001*B[8]*A[13]+(313.0495168499706*A[12]+461.112784468182*A[3])*B[12]+461.112784468182*B[3]*A[12]+469.5742752749559*A[11]*B[11]+(335.4101966249685*A[10]+525.0*A[4])*B[10]+525.0*B[4]*A[10]+(313.0495168499706*A[9]+461.1127844681819*A[2])*B[9]+461.1127844681819*B[2]*A[9]+(335.4101966249685*A[7]+525.0000000000001*A[1])*B[7]+525.0000000000001*B[1]*A[7]+469.5742752749559*A[6]*B[6]+(335.4101966249685*A[5]+525.0*A[0])*B[5]+525.0*B[0]*A[5]+469.5742752749559*(A[3]*B[3]+A[2]*B[2])); 
  tmp[6] = 4.53514739229025e-5*((5774.045375644359*A[13]+8505.0*A[7])*B[15]+(5774.045375644359*B[13]+8505.0*B[7])*A[15]+(6186.477188190384*A[10]+9683.36847383182*A[5])*B[14]+(6186.477188190384*B[10]+9683.36847383182*B[5])*A[14]+(8505.0*A[12]+5880.0*A[11]+8661.068063466539*A[3])*B[13]+(8505.0*B[12]+5880.0*B[11]+8661.068063466539*B[3])*A[13]+8661.068063466537*(A[7]*B[12]+B[7]*A[12])+(6574.039853849383*A[8]+8661.068063466537*A[7]+9683.368473831817*A[1])*B[11]+(6574.039853849383*B[8]+8661.068063466537*B[7]+9683.368473831817*B[1])*A[11]+(9683.368473831822*A[9]+6300.0*A[6]+9861.059780774072*A[2])*B[10]+(9683.368473831822*B[9]+6300.0*B[6]+9861.059780774072*B[2])*A[10]+9683.368473831822*(A[3]*B[8]+B[3]*A[8])+8820.0*(A[3]*B[7]+B[3]*A[7])+(9861.059780774074*A[5]+7043.614129124339*A[4]+11025.0*A[0])*B[6]+(9861.059780774074*B[5]+7043.614129124339*B[4]+11025.0*B[0])*A[6]+11025.0*(A[2]*B[4]+B[2]*A[4])+9861.059780774072*(A[1]*B[3]+B[1]*A[3])); 
  tmp[7] = 4.53514739229025e-5*((5774.045375644359*A[14]+8505.0*A[6])*B[15]+(5774.045375644359*B[14]+8505.0*B[6])*A[15]+(5880.0*A[12]+8505.0*A[11]+8661.068063466539*A[3])*B[14]+(5880.0*B[12]+8505.0*B[11]+8661.068063466539*B[3])*A[14]+(6186.477188190384*A[10]+9683.36847383182*A[4])*B[13]+(6186.477188190384*B[10]+9683.36847383182*B[4])*A[13]+(6574.039853849383*A[9]+8661.068063466537*A[6]+9683.368473831817*A[2])*B[12]+(6574.039853849383*B[9]+8661.068063466537*B[6]+9683.368473831817*B[2])*A[12]+8661.068063466537*(A[6]*B[11]+B[6]*A[11])+(9683.368473831822*A[8]+6300.0*A[7]+9861.059780774072*A[1])*B[10]+(9683.368473831822*B[8]+6300.0*B[7]+9861.059780774072*B[1])*A[10]+9683.368473831822*(A[3]*B[9]+B[3]*A[9])+(7043.614129124339*A[5]+9861.059780774074*A[4]+11025.0*A[0])*B[7]+(7043.614129124339*B[5]+9861.059780774074*B[4]+11025.0*B[0])*A[7]+8820.0*(A[3]*B[6]+B[3]*A[6])+11025.0*(A[1]*B[5]+B[1]*A[5])+9861.059780774072*(A[2]*B[3]+B[2]*A[3])); 
  tmp[8] = 2.267573696145125e-4*((1314.807970769877*A[14]+2205.0*A[9])*B[15]+(1314.807970769877*B[14]+2205.0*B[9])*A[15]+1936.673694766364*(A[12]*B[14]+B[12]*A[14])+(1314.807970769877*A[10]+2205.0*A[5])*B[13]+(1314.807970769877*B[10]+2205.0*B[5])*A[13]+(1314.807970769876*A[6]+2205.0*A[2])*B[11]+(1314.807970769876*B[6]+2205.0*B[2])*A[11]+1936.673694766364*(A[7]*B[10]+B[7]*A[10])+(1314.807970769876*A[4]+2205.0*A[0])*B[8]+(1314.807970769876*B[4]+2205.0*B[0])*A[8]+1936.673694766364*(A[3]*B[6]+B[3]*A[6])+1936.673694766363*(A[1]*B[4]+B[1]*A[4])); 
  tmp[9] = 2.267573696145125e-4*((1314.807970769877*A[13]+2205.0*A[8])*B[15]+(1314.807970769877*B[13]+2205.0*B[8])*A[15]+(1314.807970769877*A[10]+2205.0*A[4])*B[14]+(1314.807970769877*B[10]+2205.0*B[4])*A[14]+1936.673694766364*(A[11]*B[13]+B[11]*A[13])+(1314.807970769876*A[7]+2205.0*A[1])*B[12]+(1314.807970769876*B[7]+2205.0*B[1])*A[12]+1936.673694766364*(A[6]*B[10]+B[6]*A[10])+(1314.807970769876*A[5]+2205.0*A[0])*B[9]+(1314.807970769876*B[5]+2205.0*B[0])*A[9]+1936.673694766364*(A[3]*B[7]+B[3]*A[7])+1936.673694766363*(A[2]*B[5]+B[2]*A[5])); 
  tmp[10] = 2.267573696145125e-4*((784.0*A[15]+1154.809075128871*(A[12]+A[11])+1701.0*A[3])*B[15]+(1154.809075128871*(B[12]+B[11])+1701.0*B[3])*A[15]+(840.0*A[14]+1314.807970769877*A[9]+1237.295437638077*A[6]+1936.673694766363*A[2])*B[14]+(1314.807970769877*B[9]+1237.295437638077*B[6]+1936.673694766363*B[2])*A[14]+(840.0*A[13]+1314.807970769877*A[8]+1237.295437638077*A[7]+1936.673694766363*A[1])*B[13]+(1314.807970769877*B[8]+1237.295437638077*B[7]+1936.673694766363*B[1])*A[13]+(1176.0*A[12]+1701.0*A[11]+1732.213612693307*A[3])*B[12]+(1701.0*B[11]+1732.213612693307*B[3])*A[12]+(1176.0*A[11]+1732.213612693307*A[3])*B[11]+1732.213612693307*B[3]*A[11]+(900.0*A[10]+1408.722825824868*(A[5]+A[4])+2205.0*A[0])*B[10]+(1408.722825824868*(B[5]+B[4])+2205.0*B[0])*A[10]+1936.673694766364*(A[6]*B[9]+B[6]*A[9]+A[7]*B[8])+B[7]*(1936.673694766364*A[8]+1260.0*A[7]+1972.211956154814*A[1])+1972.211956154814*B[1]*A[7]+(1260.0*A[6]+1972.211956154814*A[2])*B[6]+1972.211956154814*B[2]*A[6]+2205.0*(A[4]*B[5]+B[4]*A[5])+1764.0*A[3]*B[3]); 
  tmp[11] = 4.53514739229025e-5*((5774.045375644358*A[10]+9683.36847383182*A[5])*B[15]+(5774.045375644358*B[10]+9683.36847383182*B[5])*A[15]+(5774.045375644358*A[13]+8505.0*A[7])*B[14]+(5774.045375644358*B[13]+8505.0*B[7])*A[14]+(9683.36847383182*A[9]+5880.0*A[6]+9861.05978077407*A[2])*B[13]+(9683.36847383182*B[9]+5880.0*B[6]+9861.05978077407*B[2])*A[13]+8505.0*(A[10]*B[12]+B[10]*A[12])+(5880.0*A[10]+9861.059780774074*A[5]+6574.039853849383*A[4]+11025.0*A[0])*B[11]+(5880.0*B[10]+9861.059780774074*B[5]+6574.039853849383*B[4]+11025.0*B[0])*A[11]+8661.068063466537*(A[3]*B[10]+B[3]*A[10])+(6574.039853849383*A[6]+11025.0*A[2])*B[8]+(6574.039853849383*B[6]+11025.0*B[2])*A[8]+8661.068063466537*(A[6]*B[7]+B[6]*A[7])+9683.368473831817*(A[1]*B[6]+B[1]*A[6])+9683.36847383182*(A[3]*B[4]+B[3]*A[4])); 
  tmp[12] = 4.53514739229025e-5*((5774.045375644358*A[10]+9683.36847383182*A[4])*B[15]+(5774.045375644358*B[10]+9683.36847383182*B[4])*A[15]+(5774.045375644358*A[13]+9683.36847383182*A[8]+5880.0*A[7]+9861.05978077407*A[1])*B[14]+(5774.045375644358*B[13]+9683.36847383182*B[8]+5880.0*B[7]+9861.05978077407*B[1])*A[14]+8505.0*(A[6]*B[13]+B[6]*A[13])+(5880.0*A[10]+6574.039853849383*A[5]+9861.059780774074*A[4]+11025.0*A[0])*B[12]+(5880.0*B[10]+6574.039853849383*B[5]+9861.059780774074*B[4]+11025.0*B[0])*A[12]+8505.0*(A[10]*B[11]+B[10]*A[11])+8661.068063466537*(A[3]*B[10]+B[3]*A[10])+(6574.039853849383*A[7]+11025.0*A[1])*B[9]+(6574.039853849383*B[7]+11025.0*B[1])*A[9]+(8661.068063466537*A[6]+9683.368473831817*A[2])*B[7]+(8661.068063466537*B[6]+9683.368473831817*B[2])*A[7]+9683.36847383182*(A[3]*B[5]+B[3]*A[5])); 
  tmp[13] = 4.53514739229025e-5*((3920.0*A[14]+6574.039853849382*A[9]+5774.045375644359*A[6]+9683.368473831817*A[2])*B[15]+(3920.0*B[14]+6574.039853849382*B[9]+5774.045375644359*B[6]+9683.368473831817*B[2])*A[15]+(5774.045375644358*(A[12]+A[11])+8505.0*A[3])*B[14]+(5774.045375644358*(B[12]+B[11])+8505.0*B[3])*A[14]+(4200.0*A[10]+7043.614129124339*A[5]+6574.039853849383*A[4]+11025.0*A[0])*B[13]+(4200.0*B[10]+7043.614129124339*B[5]+6574.039853849383*B[4]+11025.0*B[0])*A[13]+8505.0*(A[6]*B[12]+B[6]*A[12])+(9683.36847383182*A[9]+5880.0*A[6]+9861.05978077407*A[2])*B[11]+(9683.36847383182*B[9]+5880.0*B[6]+9861.05978077407*B[2])*A[11]+(6574.039853849382*A[8]+6186.477188190384*A[7]+9683.368473831817*A[1])*B[10]+(6574.039853849382*B[8]+6186.477188190384*B[7]+9683.368473831817*B[1])*A[10]+11025.0*(A[5]*B[8]+B[5]*A[8])+9683.36847383182*(A[4]*B[7]+B[4]*A[7])+8661.068063466539*(A[3]*B[6]+B[3]*A[6])); 
  tmp[14] = 4.53514739229025e-5*((3920.0*A[13]+6574.039853849382*A[8]+5774.045375644359*A[7]+9683.368473831817*A[1])*B[15]+(3920.0*B[13]+6574.039853849382*B[8]+5774.045375644359*B[7]+9683.368473831817*B[1])*A[15]+(4200.0*A[10]+6574.039853849383*A[5]+7043.614129124339*A[4]+11025.0*A[0])*B[14]+(4200.0*B[10]+6574.039853849383*B[5]+7043.614129124339*B[4]+11025.0*B[0])*A[14]+(5774.045375644358*(A[12]+A[11])+8505.0*A[3])*B[13]+(5774.045375644358*(B[12]+B[11])+8505.0*B[3])*A[13]+(9683.36847383182*A[8]+5880.0*A[7]+9861.05978077407*A[1])*B[12]+(9683.36847383182*B[8]+5880.0*B[7]+9861.05978077407*B[1])*A[12]+8505.0*(A[7]*B[11]+B[7]*A[11])+(6574.039853849382*A[9]+6186.477188190384*A[6]+9683.368473831817*A[2])*B[10]+(6574.039853849382*B[9]+6186.477188190384*B[6]+9683.368473831817*B[2])*A[10]+11025.0*(A[4]*B[9]+B[4]*A[9])+8661.068063466539*(A[3]*B[7]+B[3]*A[7])+9683.36847383182*(A[5]*B[6]+B[5]*A[6])); 
  tmp[15] = 3.174603174603174e-4*((560.0*A[10]+939.1485505499119*(A[5]+A[4])+1575.0*A[0])*B[15]+(560.0*B[10]+939.1485505499119*(B[5]+B[4])+1575.0*B[0])*A[15]+(560.0*A[13]+939.1485505499116*A[8]+824.8636250920513*A[7]+1383.338353404545*A[1])*B[14]+(560.0*B[13]+939.1485505499116*B[8]+824.8636250920513*B[7]+1383.338353404545*B[1])*A[14]+(939.1485505499116*A[9]+824.8636250920513*A[6]+1383.338353404545*A[2])*B[13]+(939.1485505499116*B[9]+824.8636250920513*B[6]+1383.338353404545*B[2])*A[13]+(824.8636250920512*A[10]+1383.338353404546*A[4])*B[12]+(824.8636250920512*B[10]+1383.338353404546*B[4])*A[12]+(824.8636250920512*A[10]+1383.338353404546*A[5])*B[11]+(824.8636250920512*B[10]+1383.338353404546*B[5])*A[11]+1215.0*(A[3]*B[10]+B[3]*A[10])+1575.0*(A[8]*B[9]+B[8]*A[9])+1215.0*(A[6]*B[7]+B[6]*A[7])); 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<16; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseMultiply1x1vTensor_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[16]; 
  tmp[0] = 0.7071067811865476*A[3]*B[8]+0.7071067811865476*A[2]*B[4]+0.7071067811865476*A[1]*B[1]+0.7071067811865476*A[0]*B[0]; 
  tmp[1] = 0.6210590034081187*A[2]*B[8]+0.6210590034081187*A[3]*B[4]+0.632455532033676*A[1]*B[4]+0.632455532033676*B[1]*A[2]+0.7071067811865476*A[0]*B[1]+0.7071067811865476*B[0]*A[1]; 
  tmp[2] = 0.7071067811865476*A[3]*B[11]+0.7071067811865476*A[2]*B[6]+0.7071067811865476*A[1]*B[3]+0.7071067811865476*A[0]*B[2]; 
  tmp[3] = 0.6210590034081188*A[2]*B[11]+0.621059003408119*A[3]*B[6]+0.632455532033676*A[1]*B[6]+0.632455532033676*A[2]*B[3]+0.7071067811865476*A[0]*B[3]+0.7071067811865476*A[1]*B[2]; 
  tmp[4] = 0.4216370213557841*A[3]*B[8]+0.6210590034081188*A[1]*B[8]+0.4517539514526258*A[2]*B[4]+0.7071067811865476*A[0]*B[4]+0.6210590034081188*B[1]*A[3]+0.7071067811865476*B[0]*A[2]+0.632455532033676*A[1]*B[1]; 
  tmp[5] = 0.7071067811865478*A[3]*B[13]+0.7071067811865476*A[2]*B[10]+0.7071067811865476*A[1]*B[7]+0.7071067811865476*A[0]*B[5]; 
  tmp[6] = 0.4216370213557841*A[3]*B[11]+0.6210590034081187*A[1]*B[11]+0.4517539514526258*A[2]*B[6]+0.7071067811865476*A[0]*B[6]+0.6210590034081189*A[3]*B[3]+0.6324555320336759*A[1]*B[3]+0.7071067811865475*A[2]*B[2]; 
  tmp[7] = 0.6210590034081189*A[2]*B[13]+0.6210590034081189*A[3]*B[10]+0.632455532033676*A[1]*B[10]+0.6324555320336761*A[2]*B[7]+0.7071067811865476*A[0]*B[7]+0.7071067811865476*A[1]*B[5]; 
  tmp[8] = 0.4216370213557841*A[2]*B[8]+0.7071067811865476*A[0]*B[8]+0.4216370213557841*A[3]*B[4]+0.6210590034081188*A[1]*B[4]+0.7071067811865476*B[0]*A[3]+0.6210590034081188*B[1]*A[2]; 
  tmp[9] = 0.7071067811865476*A[3]*B[15]+0.7071067811865478*A[2]*B[14]+0.7071067811865476*A[1]*B[12]+0.7071067811865476*A[0]*B[9]; 
  tmp[10] = 0.4216370213557841*A[3]*B[13]+0.6210590034081187*A[1]*B[13]+0.4517539514526258*A[2]*B[10]+0.7071067811865476*A[0]*B[10]+0.621059003408119*A[3]*B[7]+0.632455532033676*A[1]*B[7]+0.7071067811865476*A[2]*B[5]; 
  tmp[11] = 0.4216370213557841*A[2]*B[11]+0.7071067811865476*A[0]*B[11]+0.4216370213557841*A[3]*B[6]+0.6210590034081187*A[1]*B[6]+0.6210590034081188*A[2]*B[3]+0.7071067811865475*B[2]*A[3]; 
  tmp[12] = 0.6210590034081188*A[2]*B[15]+0.6210590034081189*A[3]*B[14]+0.6324555320336759*A[1]*B[14]+0.6324555320336761*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[9]; 
  tmp[13] = 0.4216370213557842*A[2]*B[13]+0.7071067811865476*A[0]*B[13]+0.4216370213557841*A[3]*B[10]+0.6210590034081186*A[1]*B[10]+0.6210590034081189*A[2]*B[7]+0.7071067811865478*A[3]*B[5]; 
  tmp[14] = 0.4216370213557841*A[3]*B[15]+0.6210590034081186*A[1]*B[15]+0.4517539514526258*A[2]*B[14]+0.7071067811865475*A[0]*B[14]+0.6210590034081189*A[3]*B[12]+0.6324555320336759*A[1]*B[12]+0.7071067811865476*A[2]*B[9]; 
  tmp[15] = 0.4216370213557841*A[2]*B[15]+0.7071067811865476*A[0]*B[15]+0.4216370213557841*A[3]*B[14]+0.6210590034081187*A[1]*B[14]+0.6210590034081188*A[2]*B[12]+0.7071067811865476*A[3]*B[9]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<16; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseDivide1x1vTensor_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.870828693386971*A[3])+1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.870828693386971*A[3]+1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0.0) { 
    avgA = true;
  }
 
  double As[4]; 
  double Bs[16]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = B[2]; 
    Bs[3] = 0.0; 
    Bs[4] = 0.0; 
    Bs[5] = B[5]; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = B[9]; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = 0.0; 
    Bs[15] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
  } 
 
  // Fill AEM matrix. 
  data->AEM_D = Eigen::MatrixXd::Zero(16,16); 
  data->AEM_D(0,0) = 0.7071067811865475*As[0]; 
  data->AEM_D(0,1) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,4) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,5) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  data->AEM_D(0,10) = 0.7071067811865475*As[0]; 
  data->AEM_D(0,11) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,14) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,15) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  data->AEM_D(1,0) = 0.7071067811865475*As[2]; 
  data->AEM_D(1,1) = 0.6210590034081186*As[3]+0.6324555320336759*As[1]; 
  data->AEM_D(1,10) = 0.7071067811865475*As[2]; 
  data->AEM_D(1,11) = 0.6210590034081187*As[3]+0.632455532033676*As[1]; 
  data->AEM_D(2,0) = 0.7071067811865475*As[3]; 
  data->AEM_D(2,1) = 0.6210590034081186*As[2]; 
  data->AEM_D(2,14) = 0.7071067811865474*As[3]; 
  data->AEM_D(2,15) = 0.6210590034081187*As[2]; 
 
  // Fill BEV. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,16,1) = data->u_D; 
 
} 
 
