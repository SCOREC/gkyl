/*
  Functions to generate kernels that compute the sheath potential, the
  sheath entrance ion density, and the potential in the whole domain.
  We assume ambipolar fluxes and electron adiabaticity.
*/

load("out-scripts")$
load("modal-basis")$
load("nodalOperations/quadratureFuncs.mac")$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

genPhiSheathGaussQuad(fh, funcNm, dim, basisNm, polyOrder) := block(
  /* Compute the sheath entrance potential using Gaussian quadrature. */
  [numquad,basis,vars,sheathDir,sheathVar,sheathSurfVars,basisLowD,varsLowD,subList,numBLowD,
   numB,ordWeight,normOrds,weights,ordNum,boundaryStr,ghostEvSign,bS,GammaIon_e,GammaIonB_c,
   GammaIonB_noZero_c,GammaIonB_e,m0Ion_e,m0IonB_noZero_c,m0IonB_e,phiSlowD_c,phiSlowD_e,
   m0IonB_n,GammaIonB_n,nOrd,cSub,phiS_n,i,k,phiS_c,m0IonS_c],

  numQuad : polyOrder+1, /* Number of quarature points in 1D. */

  [basis, vars] : loadBasisX(dim, basisNm, polyOrder),
  sheathDir : dim,  /* Assume the last dimension is the sheath direction. */
  sheathVar : vars[sheathDir],
  sheathSurfVars : delete(sheathVar, vars),

  /* Load a basis of one fewer dimension for projecting onto sheath surface. */
  if dim>1 then (
    [basisLowD, varsLowD] : loadBasisX(dim-1, basisNm, polyOrder),
    subList   : makelist(varsLowD[i]=sheathSurfVars[i],i,1,dim-1),
    varsLowD  : psubst(subList, varsLowD),
    basisLowD : psubst(subList, basisLowD)
  ) else (
    varsLowD : [x],  basisLowD : [1/innerProd(varsLowD,1,1,1)]
  ),
  numBLowD : length(basisLowD),

  [basis, vars] : loadBasisX(dim, basisNm, polyOrder), /* Again because of the kill in loadBasisX. */
  numB : length(basis),

  /* Get the Gaussian quadrature weights and ordinates (in [-1,1] space) for
     quadrature in one dimension lower. */
  if dim>1 then (
    ordWeight : gaussOrdWeight(numQuad,dim-1),
    normOrds  : float(ordWeight[1]),
    weights   : float(ordWeight[2]),
    ordNum    : length(normOrds)
  ),

  boundaryStr : ["lower","upper"],
  ghostEvSign : [1, -1],  skinEvSign  : [-1, 1],
  
  for bS : 1 thru 2 do ( /* One kernel for each of lower and upper boundaries. */
    printf(fh,sconcat("void ",funcNm,"(const double q_e, const double m_e, const double T_e, const double *Gamma_i, const double *m0Ion, double *m0IonS, double *phiS) ~%{ ~%"), boundaryStr[bS]),
    printf(fh,"  // q_e:     electron change.~%"),
    printf(fh,"  // m_e:     electron mass.~%"),
    printf(fh,"  // T_e:     electron temperature.~%"),
    printf(fh,"  // Gamma_i: ion particle flux through sheath entrance.~%"),
    printf(fh,"  // m0Ion:   ion density.~%"),
    printf(fh,"  // m0IonS:  ion density at the sheath entrance.~%"),
    printf(fh,"  // phiS:    electrostatic sheath potential.~%"),
    printf(fh,"~%"),
  
    GammaIon_e : doExpand1(Gamma_i, basis),     /* Particle flux expanded in basis. */
    /* Evaluate the (ghost cell) flux at the boundary surface. */
    GammaIonB_c : calcInnerProdList(varsLowD,1,basisLowD,subst(sheathVar=ghostEvSign[bS], GammaIon_e)),
    GammaIonB_noZero_c : doMakeExprLst(GammaIonB_c, GammaIonB), 
    GammaIonB_e : doExpand(GammaIonB_noZero_c,basisLowD),
    printf(fh,"  double GammaIonB[~a];~%", numBLowD),
    writeCExprs1(GammaIonB, GammaIonB_c),
    printf(fh,"~%"),

    m0Ion_e : doExpand1(m0Ion, basis),
    /* Evaluate the (skin cell) ion density at the boundary surface. */
    m0IonB_c : calcInnerProdList(varsLowD,1,basisLowD,subst(sheathVar=skinEvSign[bS], m0Ion_e)),
    m0IonB_noZero_c : doMakeExprLst(m0IonB_c, m0IonB), 
    m0IonB_e : doExpand(m0IonB_noZero_c,basisLowD),
    printf(fh,"  double m0IonB[~a];~%", numBLowD),
    writeCExprs1(m0IonB, m0IonB_c),
    printf(fh,"~%"),

    /* Compute the sheath potential
         phiS = (T_e/q_e)*log( sqrt(2*pi)*Gamma_i/(n_i*sqrt(T_e/m_e)) )
       using quadrature. If dim=1 no quadrature is needed. */
    phiSlowD_c : makelist(0,i,1,numBLowD),
    if dim=1 then (
      phiSlowD_c : [(T_e/q_e)*log(sqrt(2*%pi)*GammaIonB_e/(m0IonB_e*sqrt(T_e/m_e)))],
      phiSlowD_e : phiSlowD_c[1]
    ) else (
      m0IonB_n    : makelist(0,i,1,ordNum),
      GammaIonB_n : makelist(0,i,1,ordNum),
      for i : 1 thru ordNum do (
        nOrd : normOrds[i],
        cSub : makelist(varsLowD[d]=normOrds[i][d],d,1,dim-1),

        m0IonB_n[i]    : subst(cSub, m0IonB_e),
        GammaIonB_n[i] : subst(cSub, GammaIonB_e)
      ),

      phiS_n : makelist(0,i,1,ordNum),
      for i : 1 thru ordNum do (
        phiS_n[i] : (T_e/q_e)**log(sqrt(2*%pi)*GammaIonB_n[i]/(m0IonB_n[i]*sqrt(T_e/m_e)))
      ),
      printf(fh,"  double phiS_qp[~a];~%", ordNum),
      writeCExprs1(phiS_qp, phiS_n),
      printf(fh,"~%"),

      phiSlowD_c : makelist(0,i,1,numBLowD),
      for i : 1 thru ordNum do (
        nOrd : normOrds[i],
        /* Add contribution to each DG coefficient. */
        for k : 1 thru numBLowD do (
          phiSlowD_c[k] : phiSlowD_c[k]+weights[i]*subst(makelist(varsLowD[d]=nOrd[d],d,1,dim-1),basisLowD[k])*phiS_qp[i-1]
        )
      ),
      writeCExprsNoExpand1(phiSlowD, phiSlowD_c),
      phiSlowD_e : doExpand(phiSlowD_c, basisLowD)
    ),
    printf(fh,"~%"),

    phiS_c : calcInnerProdList(vars, 1, basis, phiSlowD_e),
    writeCExprsNoExpand1(phiS, phiS_c),
    printf(fh,"~%"),

    m0IonS_c : calcInnerProdList(vars, 1, basis, subst(sheathVar=skinEvSign[bS],m0Ion_e)),
    writeCExprsNoExpand1(m0IonS, m0IonS_c),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )
)$ 

genPhiGaussQuad(fh, funcNm, dim, basisNm, polyOrder) := block(
  /* Compute the potential in the domain volume using Gaussian quadrature. */
  [basis,vars,numB,ordWeight,normOrds,weights,ordNum,m0Ion_e,m0IonS_e,phiS_e,
   i,k,m0Ion_n,m0IonS_n,phiS_n,nOrd,cSub,phi_n,phi_c],

  numQuad : polyOrder+1, /* Number of quarature points in 1D. */

  [basis, vars] : loadBasisX(dim, basisNm, polyOrder), /* Again because of the kill in loadBasisX. */
  numB : length(basis),

  /* Get the Gaussian quadrature weights and ordinates (in [-1,1] space) */
  ordWeight : gaussOrdWeight(numQuad,dim),
  normOrds  : float(ordWeight[1]),
  weights   : float(ordWeight[2]),
  ordNum    : length(normOrds),

  printf(fh,sconcat("void ",funcNm,"(const double q_e, const double T_e, const double *m0Ion, const double *m0IonS, const double *phiS, double *phi) ~%{ ~%")),
  printf(fh,"  // q_e:    electron change.~%"),
  printf(fh,"  // T_e:    electron temperature.~%"),
  printf(fh,"  // m0Ion:  ion density.~%"),
  printf(fh,"  // m0IonS: ion density at the sheath entrance.~%"),
  printf(fh,"  // phiS:   electrostatic sheath potential.~%"),
  printf(fh,"  // phi:    electrostatic potential in domain volume.~%"),
  printf(fh,"~%"),

  m0Ion_e  : doExpand1(m0Ion, basis),
  m0IonS_e : doExpand1(m0IonS, basis),
  phiS_e   : doExpand1(phiS, basis),

  m0Ion_n  : makelist(0,i,1,ordNum),
  m0IonS_n : makelist(0,i,1,ordNum),
  phiS_n   : makelist(0,i,1,ordNum),
  for i : 1 thru ordNum do (
    nOrd : normOrds[i],
    cSub : makelist(vars[d]=normOrds[i][d],d,1,dim),

    m0Ion_n[i]  : subst(cSub, m0Ion_e),
    m0IonS_n[i] : subst(cSub, m0IonS_e),
    phiS_n[i]   : subst(cSub, phiS_e)
  ),

  phi_n : makelist(0,i,1,ordNum),
  for i : 1 thru ordNum do (
    phi_n[i] : phiS_n[i] - (T_e/q_e)*log(m0Ion_n[i]/m0IonS_n[i])
  ),
  printf(fh,"  double phi_qp[~a];~%", ordNum),
  writeCExprs1(phi_qp, phi_n),
  printf(fh,"~%"),

  phi_c : makelist(0,i,1,numB),
  for i : 1 thru ordNum do (
    nOrd : normOrds[i],
    /* Add contribution to each DG coefficient. */
    for k : 1 thru numB do (
      phi_c[k] : phi_c[k]+weights[i]*subst(makelist(vars[d]=nOrd[d],d,1,dim),basis[k])*phi_qp[i-1]
    )
  ),

  writeCExprsNoExpand1(phi, phi_c),
  printf(fh, "}~%"),
  printf(fh, "~%")
)$
