load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("nodalOperations/nodalFunctions")$
load("scifac")$
fpprec : 24$

wc : [w1, w2, w3]$
derivfac : [dfac1, dfac2, dfac3]$

cvars : [X1, X2, X3]$

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* set up some vector calculus functions */
load("vect")$
fgrad(f):= ev(express(grad(f)),diff)*derivfacsC$

calcUpdateInDir(surfDir, fh, funcNm, cdim, basisFun, polyOrder) := block([],
kill(varsC, varsC, basisC, basisP),
modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x"),
load(modNm),
  bC : basisC[polyOrder],
  numC : length(bC),
  volfac : 1,
  /* get surface variable */
  surfVar : varsC[surfDir],
  /* remove surface variable from integrand of surface integrals */
  surfIntVars : delete(surfVar,varsC),
  dirlabel : cvars[surfDir],
  dfacSurf : derivfac[surfDir], 
  wSurf : wc[surfDir],

  /* remove volume contribution from surface variable, which is not integrated */
  surfac : fullratsimp(volfac*dfacSurf),

  print("Working on ", funcNm, "_", dirlabel, "_P", polyOrder),
  printf(fh, "double ~a_~a_P~a(const double *w, const double *dxv, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, dirlabel, polyOrder),
  
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. ~%"),

  for dir : 1 thru cdim do (
    printf(fh, "  double dfac~a = 2.0/dxv[~a]; ~%", dir, dir-1),
    printf(fh, "  double w~a = w[~a]; ~%", dir, dir-1)
  ),

  for dir : 1 thru cdim do (
    printf(fh, "  const double *v~a = &fr[~a]; ~%", dir, numC*(dir))
  ),
  flush_output(fh),

  printf(fh, "  double incr[~a]; ~%", length(bC)),
  flush_output(fh),

  /* expand distribution function on basis */
  fL_expd:doExpand1(fl,bC),
  fR_expd:doExpand1(fr,bC),
  v_expd:[],
  for dir : 1 thru cdim do (
    vd : verbify(sconcat("v",dir)),
    v_expd:append(v_expd, [doExpand1(vd,bC)])
  ),

  /* calculate phase space velocity alpha in direction of surfVar */
  /* we assume alpha.n is continuous across boundary */
  alpha_expd : v_expd[surfDir],
  /* calculate expression for surface-averaged alpha, and print to c variable alpha0 */
  alpha0expr : gcfac(fullratsimp(innerProd(surfIntVars, 1, subst(surfVar=-1,alpha_expd), subst(surfVar=-1, bC[1]))*bC[1])),
  printf(fh, "  // surface-averaged phase velocity in this direction ~%"),
  printf(fh, "  double alpha0 = ~a; ~%~%", float(alpha0expr)),
  flush_output(fh),

  /* generate surface basis */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsC,1,bC,subst([surfVar^2=var2,var2=1/3,surfVar=0],bC)))*bC),

  /* project full alpha expression evaluatated at interior surface onto surface basis and print to c variable alpha */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  alpha_k : fullratsimp(innerProd(surfIntVars, 1, bSurf, subst(surfVar=-1,alpha_expd))),
  flush_output(fh),
  writeCExprsNoExpand1(alpha, subst([wv^2=wv2,dfac_v^2=dfac_v2, m_^2=m2, q_^2=q2],alpha_k)),
  alphaNoZero_k : doMakeExprLst(alpha_k, alpha),
  alphaSurf_expd : doExpandLst(alphaNoZero_k, bSurf),
  flush_output(fh),

  if (alphaSurf_expd = 0) then (
    printf(fh, "  // alpha == 0, so nothing to do ~%"),
    printf(fh, "  return std::abs(alpha0); ~%"),
    printf(fh, "} ~%"),
    flush_output(fh)
  )
  else (
    if cdim>1 then (
      printf(fh, "#if upwindType == SURFAVG ~%")
    ),
    printf(fh, "  if (alpha0>0) { ~%"),
    fhatSurf_expd : subst(surfVar=1, fL_expd),

    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
    incr_r : facsum(fullratsimp(t),dxv),
    writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
    flush_output(fh),

    printf(fh, "  } else { ~%"),
    fhatSurf_expd : subst(surfVar=-1, fR_expd),

    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
    incr_r : facsum(fullratsimp(t),dxv),
    writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
    printf(fh, "  }~%"),
    flush_output(fh),

    if cdim>1 then (
      printf(fh, "#elif upwindType == QUAD ~%"),
      printf(fh, "double fupwind[~a];~%", length(bSurf)),
      printf(fh, "double fupwindQuad[~a];~%", length(bSurf)),
      printf(fh, "double alphaQuad;~%"),
      surfNodes : getNodes(basisFun, cdim-1, polyOrder),
      if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),
      /* function to evaluate expansion g at surface quadrature nodes */
      /* evaluate fl, fr, and alpha at surface quadrature nodes */
      frQ:gcfac(float(evAtNodes(subst(surfVar=-1,fR_expd), surfNodes, surfIntVars))),
      flQ:gcfac(float(evAtNodes(subst(surfVar=1,fL_expd), surfNodes, surfIntVars))), 
      /* note: alphaSurf_expd is already a surface expansion */
      alphaq:gcfac(float(evAtNodes(alphaSurf_expd, surfNodes, surfIntVars))),
      /* determine upwinding at each surface quadrature node */
      fupQ : gcfac(.5*(flQ+frQ)+.5*sgn(alphaQuad)*(flQ-frQ)),
      for i:1 thru length(alphaq) do (
      printf(fh, "  alphaQuad = ~a; ~%", alphaq[i]),
      printf(fh, "  fupwindQuad[~a] = ~a; ~%", i-1, fupQ[i])
      ),
      flush_output(fh),
      /* use modToNod transformation to get modal surface expansion from nodal quadrature points */
      numNodes : length(surfNodes),
      nodToMod : calcNodToModWithNodes(basisFun, cdim-1, polyOrder, surfNodes),
      fupwind_k : gcfac(fullratsimp(nodToMod . makelist(fupwindQuad[i-1],i,1,numNodes))),
      fupwind_k : makelist(fupwind_k[i][1],i,1,numNodes),
      /* write coefficients of modal surface expansion fupwind */
      writeCExprsNoExpand1(fupwind, fupwind_k),
      fhatSurf_expd:doExpand1(fupwind,bSurf),
      flush_output(fh),

      t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=-1, bC), fhatSurf_expd),
      incr_r : facsum(fullratsimp(t),dxv),
      writeCExprsNoExpand1(incr, subst([wv^2=wv2,q_^2=q2], incr_r)),
      printf(fh, "~%"),
      flush_output(fh),
      printf(fh, "#endif ~%")
    ),

    incr_s : makelist(incr[i-1], i, 1, length(bC)),
    for i : 1 thru length(bC) do (
      if (incr_r[i] = 0) then incr_s[i] : 0
    ),
    outr_c : incr_s,
    t : surfac*calcInnerProdList(surfIntVars, alphaSurf_expd, subst(surfVar=1, bC), fhatSurf_expd),
    incr_l : -t,
    signs : fullratsimp(incr_l/incr_r),
    incr_s : makelist(signs[i]*incr[i-1], i, 1, length(bC)),
    for i : 1 thru length(bC) do (
      if (incr_r[i] = 0) then incr_s[i] : 0
    ),
    outl_c : incr_s
  ),

  writeCIncrExprsNoExpand1(outr, outr_c),  
  printf(fh, "~%"),
  flush_output(fh),
  writeCIncrExprsNoExpand1(outl, outl_c),
  flush_output(fh),

  printf(fh, "  return std::abs(alpha0); ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$

calcAdvectionSurfUpdater(fh, funcNm, cdim, basisFun,p) := block([],
  for dir : 1 thru cdim do (
    calcUpdateInDir(dir, fh, funcNm, cdim, basisFun,p)
  )
)$

for c : 1 thru 3 do (
pmax:2,
for p:1 thru pmax do (
fname : sconcat("~/max-out/PassiveAdvectionSurfSer", c, "xP", p, ".cpp"),
fh : openw(fname),
printf(fh, "#include <PassiveAdvectionModDecl.h> ~%"),
funcName : sconcat("PassiveAdvectionSurf", c, "xSer"),
calcAdvectionSurfUpdater(fh, funcName, c, "Ser", p),
close(fh)
))$

